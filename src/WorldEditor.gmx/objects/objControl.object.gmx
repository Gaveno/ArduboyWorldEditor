<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variable initialization

mcx = 0;
mcy = 0;
vcx = 0;
vcy = 0;

world = ds_list_create();
chunk = ds_list_create();
region = ds_list_create();
specchunk = ds_list_create();
object = ds_list_create();
specobject = ds_list_create();
spectile = ds_list_create();
chunk_selected = 0;
tile_selected = 0;

tooltip = 1;
previous_mouse_x = 0;
previous_mouse_y = 0;

region_selected = 0;
object_selected = 0;

world_internal_name = "newworld";
world_external_name = "newworld";
world_selected = 0;

world_chunks_width = 32;
world_chunks_height = 32;

world_size = world_chunks_width * world_chunks_height;

for (var i = 0; i &lt; world_size; i++) {
    chunk_state[i] = 0; // not solid
}

zoom_level = 1;
zoom_start_w = view_wview;
zoom_start_h = view_hview;

custom_tiles = -1;
custom_num_empty = 7;
custom_tiles_path = "";
custom_num_tiles = sprite_get_number(sprTiles);

player_x = 0;
player_y = 0;
player_image = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// gui initialization

guiInit();
main_gui = guiLoad("Main.gui",-2,-2);
file_gui = noone;
chunk_editor_gui = noone;
chunk_sel_gui = noone;
object_sel_gui = noone;
tile_sel_gui = noone;
region_editor_gui = noone;
region_sel_gui = noone;
save_gui = noone;
world_sel_gui = noone;
save_first_gui = noone;
confirm_delete_gui = noone;
object_editor_gui = noone;
export_gui = noone;
tile_edit_gui = noone;
door_dest_gui = noone;

// export_gui
btn_e_x = noone;
btn_e_export = noone;
btn_e_cancel = noone;
btn_e_name = noone;
btn_e_image = noone;
btn_e_copy = noone;

// confirm delete
btn_cd_delete = noone;
btn_cd_cancel = noone;
btn_cd_x = noone;

//save first
btn_sf_yes = noone;
btn_sf_no = noone;
btn_sf_x = noone;

//main
btn_file_menu = guiGetObject(main_gui, 3);
btn_place_object = guiGetObject(main_gui, 2);
btn_place_chunk = guiGetObject(main_gui, 4);
btn_place_solid = guiGetObject(main_gui, 9);
btn_place_player = guiGetObject(main_gui, 30);
btn_place_tile = guiGetObject(main_gui, 31);
btn_edit_object = guiGetObject(main_gui, 6);
btn_edit_chunk = guiGetObject(main_gui, 7);
btn_edit_region = guiGetObject(main_gui, 8);
btn_edit_tile = guiGetObject(main_gui, 29);
btn_world_name = guiGetObject(main_gui, 11);
btn_world_name.myInputBox = true;
btn_world_name.myInputType = INPUT_TYPE_STRING;
btn_world_name.myAllowSpace = false;
btn_world_name.myText = world_internal_name;
btn_show_solid = guiGetObject(main_gui, 14);
btn_show_solid.myCheckBox = true;
btn_show_chunks = guiGetObject(main_gui, 16);
btn_show_chunks.myCheckBox = true;
btn_show_regions = guiGetObject(main_gui, 20);
btn_show_regions.myCheckBox = true;
btn_show_objects = guiGetObject(main_gui, 18);
btn_show_objects.myCheckBox = true;
btn_zoom_p = guiGetObject(main_gui, 23);
btn_zoom_m = guiGetObject(main_gui, 22);
box_mini_map = guiGetObject(main_gui, 24);
box_zoom_level = guiGetObject(main_gui, 25);

main_select = guiCreateSelection(main_gui, btn_place_object,
     btn_place_chunk, btn_place_solid, btn_place_player, btn_place_tile);

//file
btn_file_new = noone;
btn_file_open = noone;
btn_file_save = noone;
btn_file_export = noone;
btn_file_settings = noone;
btn_file_x = noone;

//save menu
btn_save_name = noone;
btn_save_save = noone;
btn_save_cancel = noone;
btn_save_x = noone;

//load menu
btn_load_load = noone;
btn_load_next = noone;
btn_load_prev = noone;
btn_load_cancel = noone;
btn_load_world[100] = noone;

//chunk edit
btn_ce_save = noone;
btn_ce_cancel = noone;
btn_ce_name = noone;
btn_ce_tile[35] = noone;

//chunk select
btn_cs_use = noone;
btn_cs_next = noone;
btn_cs_prev = noone;
btn_cs_cancel = noone;
btn_cs_new = noone;
btn_cs_edit = noone;
btn_cs_del = noone;
btn_cs_chunk[100] = noone;

//object select
btn_os_use = noone;
btn_os_name = noone;
btn_os_next = noone;
btn_os_prev = noone;
btn_os_cancel = noone;
btn_os_new = noone;
btn_os_edit = noone;
btn_os_del = noone;
btn_os_object[100] = noone;

//region edit
btn_re_save = noone;
btn_re_cancel = noone;
btn_re_name = noone;
btn_re_chunk[9] = noone;
btn_re_x = noone;
btn_re_y = noone;
btn_re_bin = noone;
btn_re_w = noone;
btn_re_h = noone;
btn_re_empty = noone;
btn_re_solid = noone;
btn_re_depth = noone;

//region select
btn_rs_next = noone;
btn_rs_prev = noone;
btn_rs_cancel = noone;
btn_rs_new = noone;
btn_rs_edit = noone;
btn_rs_del = noone;
btn_rs_region[100] = noone;


//tile select
btn_ts_next = noone;
btn_ts_prev = noone;
btn_ts_cancel = noone;
btn_ts_tile[15] = noone;

view_yview = -main_gui.myHeight+3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(chunk);
ds_list_destroy(tile);
ds_list_destroy(region);
ds_list_destroy(object);
ds_list_destroy(specchunk);
ds_list_destroy(specobject);
ds_list_destroy(world);
guiDestroy(main_gui);
if (guiExists(file_gui))
    guiDestroy(file_gui);
if (guiExists(chunk_editor_gui))
    guiDestroy(chunk_editor_gui);
if (guiExists(tile_sel_gui))
    guiDestroy(tile_sel_gui);
if (guiExists(region_editor_gui))
    guiDestroy(region_editor_gui);
if (guiExists(region_sel_gui))
    guiDestroy(region_sel_gui);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// export

exportWorld2(__name, __savei, __savec);

guiDestroy(export_wait_gui);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - main_gui

// File menu
if (guiCheckButton(btn_file_menu)) {
    // open file menu
    file_gui = guiLoad("File.gui", 10, 10);
    btn_file_new = guiGetObject(file_gui, 1);
    btn_file_open = guiGetObject(file_gui, 2);
    btn_file_save = guiGetObject(file_gui, 3);
    btn_file_saveas = guiGetObject(file_gui, 6);
    btn_file_x = guiGetObject(file_gui, 4);
    btn_file_export = guiGetObject(file_gui, 5);
    //btn_file_settings = guiGetObject(file_gui, 7);
}

// Edit Chunks
if (guiCheckButton(btn_edit_chunk)) {
    openSelectChunk(false);
}

// Edit objects
if (guiCheckButton(btn_edit_object)) {
    openObjectSelect(false);
}

// Edit Regions
if (guiCheckButton(btn_edit_region)) {
    region_sel_gui = guiLoad("RegionSelect.gui", 100, 100);
    var box = guiGetObject(region_sel_gui, 2);
    box.y -= 3;
    box.myHeight += 3;
    btn_rs_next = guiGetObject(region_sel_gui, 4);
    btn_rs_prev = guiGetObject(region_sel_gui, 5);
    btn_rs_cancel = guiGetObject(region_sel_gui, 6);
    btn_rs_cancel.tooltip = "Close this window.";
    btn_rs_new = guiGetObject(region_sel_gui, 7);
    btn_rs_new.tooltip = "Create a new 'blank' region.";
    btn_rs_edit = guiGetObject(region_sel_gui, 8);
    btn_rs_edit.tooltip = "Edit the selected region's properties.#Define the area, and what is inside of it.";
    btn_rs_del = guiGetObject(region_sel_gui, 9);
    btn_rs_del.tooltip = "Permanently delete the region.#This cannot be undone!";
    btn_rs_region[0] = guiGetObject(region_sel_gui, 3);
    btn_rs_region[0].visible = true;
    btn_rs_region[0].tooltip = "Regions define the generic look of a#portion of the overworld.";
    var spacing = 7;
    scroll = 0;
    for (var i = 1; i &lt; ds_list_size(region); i++) {
        btn_rs_region[i] = guiDuplicateElement(region_sel_gui, btn_rs_region[i - 1],
                                            btn_rs_region[0].x,
                                            btn_rs_region[i - 1].y + btn_rs_region[0].myHeight + spacing);
    }
    if (ds_list_size(region) == 0) {
        btn_rs_region[0].visible = false;
    }
    for (var i = 0; i &lt; ds_list_size(region); i++) {
        btn_rs_region[i].myRegion = region[| i];
        btn_rs_region[i].starty = btn_rs_region[i].y;
        if (region_selected == i)
            btn_rs_region[i].myColor = c_green;
    }
}

// edit tiles
if (guiCheckButton(btn_edit_tile)) {
    tile_edit_gui = guiLoad("TileEdit.gui", 100, 100);
    tile_edit_gui.custom_tiles = custom_tiles;
    tile_edit_gui.iname = "";
    btn_te_emptytiles = guiGetObject(tile_edit_gui, 3);
    btn_te_emptytiles.myInputBox = true;
    btn_te_emptytiles.myInputType = INPUT_TYPE_INT;
    btn_te_emptytiles.myText = string(custom_num_empty);
    btn_te_emptytiles.myInputValueInt = custom_num_empty;
    btn_te_import = guiGetObject(tile_edit_gui, 4);
    btn_te_save = guiGetObject(tile_edit_gui, 5);
    btn_te_close = guiGetObject(tile_edit_gui, 6);
    box_te_tiles = guiGetObject(tile_edit_gui, 1);
    box_te_tiles.num_empty = 0;
    btn_te_shiftm = guiGetObject(tile_edit_gui, 9);
    btn_te_shiftm.tooltip = "Shift every chunks solid tiles left (-) by 1.#Happens right away!";
    btn_te_shiftp = guiGetObject(tile_edit_gui, 10);
    btn_te_shiftp.tooltip = "Shift every chunks solid tiles right (+) by 1.#Happens right away!";
    tile_edit_gui.num_tiles = custom_num_tiles;
    if (sprite_exists(custom_tiles)) {
        box_te_tiles.sprite_index = createTileImage(custom_tiles, custom_num_empty);
    }
    else {
        box_te_tiles.sprite_index = createTileImage(sprTiles, custom_num_empty);
    }
}

// zoom
if (guiCheckButton(btn_zoom_m)) {
    if (zoom_level &lt; 3) {
        zoom_level += 0.1;
        view_wview = zoom_start_w * zoom_level;
        view_hview = zoom_start_h * zoom_level;
        box_zoom_level.myText = stringChopN(string(1 / zoom_level * 100), ".", 0) + "%";
        box_zoom_level.myStateChange = true;
    }
}

if (guiCheckButton(btn_zoom_p)) {
    if (zoom_level &gt; 0.5) {
        zoom_level -= 0.1;
        view_wview = zoom_start_w * zoom_level;
        view_hview = zoom_start_h * zoom_level;
        box_zoom_level.myText = stringChopN(string(1 / zoom_level * 100), ".", 0) + "%";
        box_zoom_level.myStateChange = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - file_gui

if (guiExists(file_gui)) {
    
    if (guiCheckButton(btn_file_x)) {
        guiDestroy(file_gui);
    }

    if (guiCheckButton(btn_file_save)) {
        openSaveMenu();
        saveextra = false;
    }
    
    if (guiCheckButton(btn_file_saveas)) {
        openSaveMenu();
        saveextra = true;
    }
    
    // new
    if (guiCheckButton(btn_file_new)) {
        openSaveFirst();
    }
    
    // open file
    if (guiCheckButton(btn_file_open)) {
        // get world list
        ds_list_clear(world);
        /*if (file_exists("worlds.txt")) {
            var file = file_text_open_read("worlds.txt");
            while (!file_text_eof(file)) {
                ds_list_insert(world, 0, file_text_read_string(file));
                file_text_readln(file);
            }
            file_text_close(file);
        }*/
        var str = file_find_first("saves\*.awd",0);
        if (string_length(str) &gt; 0) {
            ds_list_add(world, stringChopN(str, ".", 0));
        }
        while (string_length(str) &gt; 1) {
            str = file_find_next();
            if (string_length(str) &gt; 0) {
                ds_list_add(world, stringChopN(str, ".", 0));
            }
        }
        file_find_close();
        
        // load gui
        world_sel_gui = guiLoad("WorldSelect.gui", 100, 100);
        btn_load_load = guiGetObject(world_sel_gui, 6);
        btn_load_next = guiGetObject(world_sel_gui, 3);
        btn_load_prev = guiGetObject(world_sel_gui, 4);
        btn_load_cancel = guiGetObject(world_sel_gui, 5);
        btn_load_find = guiGetObject(world_sel_gui, 7);
        btn_load_world[0] = guiGetObject(world_sel_gui, 2);
        if (ds_list_size(world) &gt; 0) {
            btn_load_world[0].visible = true;
            btn_load_world[0].myText = world[| 0];
        }
        var spacing = 7;
        scroll = 0;
        for (var i = 1; i &lt; ds_list_size(world); i++) {
            btn_load_world[i] = guiDuplicateElement(world_sel_gui, btn_load_world[i - 1],
                                                btn_load_world[0].x,
                                                btn_load_world[i - 1].y + btn_load_world[0].myHeight + spacing);
            btn_load_world[i].myText = world[| i];
        }
        if (ds_list_size(world) == 0) {
            btn_load_world[0].visible = false;
        }
        for (var i = 0; i &lt; ds_list_size(world); i++) {
            btn_load_world[i].starty = btn_load_world[i].y;
            if (world_selected == i)
                btn_load_world[i].myColor = c_green;
        }
    }
    
    // export
    if (guiCheckButton(btn_file_export)) {
        export_gui = guiLoad("Export.gui", 50, 50);
        btn_e_x = guiGetObject(export_gui, 5);
        btn_e_export = guiGetObject(export_gui, 3);
        btn_e_cancel = guiGetObject(export_gui, 4);
        btn_e_name = guiGetObject(export_gui, 2);
        btn_e_name.myText = world_internal_name;
        btn_e_name.myInputBox = true;
        btn_e_name.myInputType = INPUT_TYPE_STRING;
        btn_e_image = guiGetObject(export_gui, 7);
        btn_e_image.myCheckBox = true;
        btn_e_copy = guiGetObject(export_gui, 9);
        btn_e_copy.myCheckBox = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - object_sel_gui

if (guiExists(object_sel_gui)) {
    var y_max_offset = 0;
    var size = 0;
    if (ds_list_size(object) &gt; 1) {
        size = btn_os_object[1].y - btn_os_object[0].y;
        y_max_offset = max(0, size * ds_list_size(object) - size * 4);
    }
    // Cancel
    if (guiCheckButton(btn_os_cancel)) {
        guiDestroy(object_sel_gui);
        exit;
    }
    
    // New object
    if (guiCheckButton(btn_os_new)) {
        var limit = 4;
        if (ds_list_size(object) &lt; limit) {
            if (ds_list_size(object) == 0) {
                btn_os_object[0].visible = true;
                ds_list_add(object, instance_create(0, 0, objObject));
                btn_os_object[0].myObject = object[| ds_list_size(object) - 1];
                object_selected = 0;
                btn_os_object[0].myColor = c_green;
                btn_os_object[0].sprite_index = sprObjects;
                btn_os_object[0].image_index = btn_os_object[0].myObject.image_index;
                object[| ds_list_size(object) - 1].index = ds_list_size(object) - 1;
            }
            else {
                var spacing = 7;
                btn_os_object[ds_list_size(object)] = guiDuplicateElement(
                    object_sel_gui, btn_os_object[0], btn_os_object[0].x,
                    btn_os_object[ds_list_size(object) - 1].y + btn_os_object[0].myHeight + spacing);
                btn_os_object[ds_list_size(object)].visible = true;
                ds_list_add(object, instance_create(0, 0, objObject));
                btn_os_object[ds_list_size(object) - 1].myObject = object[| ds_list_size(object) - 1];
                btn_os_object[object_selected].myColor = c_ltgray;
                object_selected = ds_list_size(object) - 1;
                btn_os_object[ds_list_size(object) - 1].myColor = c_green;
                btn_os_object[ds_list_size(object) - 1].sprite_index = sprObjects;
                btn_os_object[ds_list_size(object) - 1].image_index = btn_os_object[ds_list_size(object) - 1].myObject.image_index;
                object[| ds_list_size(object) - 1].index = ds_list_size(object) - 1;
            }
            object_sel_gui.myUpdate = true;
        }
    }
    
    // Scroll
    var scroll_speed = size;
    
    // Scroll down
    if (guiCheckButton(btn_os_prev)) {
        if (scroll &lt; y_max_offset) {
            scroll += scroll_speed;
            for (var i = 0; i &lt; ds_list_size(object); i++) {
                btn_os_object[i].y -= scroll_speed;
                btn_os_object[i].myStateChange = true;
            }
        }
    }
    
    // Scroll up
    if (guiCheckButton(btn_os_next)) {
        if (scroll &gt; 0) {
            scroll -= scroll_speed;
            for (var i = 0; i &lt; ds_list_size(object); i++) {
                btn_os_object[i].y += scroll_speed;
                btn_os_object[i].myStateChange = true;
            }
        }
    }
    
    // Object edit
    if (guiCheckButton(btn_os_edit) &amp;&amp; ds_list_size(object) &gt; 0) {
        object_editor_gui = guiLoad("ObjectEdit.gui", 170, 150);
        btn_oe_save = guiGetObject(object_editor_gui, 2);
        btn_oe_save.tooltip = "Save changes and close object editor.";
        btn_oe_cancel = guiGetObject(object_editor_gui, 3);
        btn_oe_cancel.tooltip = "Discard changes and close object editor.";
        btn_oe_name = guiGetObject(object_editor_gui, 4);
        btn_oe_name.tooltip = "The name of the object. Used for clarity.";
        btn_oe_name.myInputBox = true;
        btn_oe_name.myInputType = INPUT_TYPE_STRING;
        btn_oe_name.myText = object[| object_selected].name;
        box_oe_oid = guiGetObject(object_editor_gui, 14);
        box_oe_oid.myText = string(object_selected);
        
        object_editor_selection = guiCreateSelection(object_editor_gui);
        for (var i = 0; i &lt; 4; i++) {
            btn_oe_image[i] = guiGetObject(object_editor_gui, 10 + i);
            btn_oe_image[i].sprite_index = sprObjects;
            btn_oe_image[i].image_speed = 0;
            btn_oe_image[i].image_index = i;
            btn_oe_image[i].myText = " ";
            btn_oe_image[i].tooltip = "Click to select which image to use. Editor only.";
            guiAddSelection(object_editor_selection, btn_oe_image[i]);
            if (object[| object_selected].image_index == i) guiSelectObject(btn_oe_image[i]);
        }
    }
    
    // delete
    if (guiCheckButton(btn_os_del) &amp;&amp; ds_list_size(object) &gt; 0) {
        openConfirmDelete(0, object[| object_selected]);
        exit;
    }
    
    // Selection
    for (var i = 0; i &lt; ds_list_size(object); i++) {
        if (guiCheckButton(btn_os_object[i])) {
            btn_os_object[object_selected].myColor = make_color_rgb(225,225,225);
            btn_os_object[i].myColor = c_green;
            object_selected = i;
            object_sel_gui.myUpdate = true;
        }
        if (btn_os_object[i].myText != btn_os_object[i].myObject.name) {
            btn_os_object[i].myText = btn_os_object[i].myObject.name;
            btn_os_object[i].myStateChange = true;
        }
        if (btn_os_object[i].image_index != btn_os_object[i].myObject.image_index) {
            btn_os_object[i].image_index = btn_os_object[i].myObject.image_index;
            btn_os_object[i].myStateChange = true;
        }
    }
    
    // Use
    if (guiCheckButton(btn_os_use)) {
        if (ds_list_size(object) &gt; 0) {
            // selecting specific object
            specific_object.myObject = object[| object_selected];
            specific_object.image_index = object[| object_selected].image_index;
            specific_object.IID = btn_os_iid.myInputValueInt;
            specific_object.name = btn_os_name.myText;
            guiDestroy(object_sel_gui);
            
            /*if (specific_object.image_index == 3) {
                // door
                door_dest_gui = guiLoad("DoorDestination.gui", 200, 10);
                guiMoveTo(door_dest_gui, display_get_gui_width() / 2 - door_dest_gui.myWidth / 2, 10);
                btn_dd_cancel = guiGetObject(door_dest_gui, 1);
            }*/
            exit;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button_handling - object_editor_gui

if (guiExists(object_editor_gui)) {
    if (guiCheckButton(btn_oe_cancel)) {
        guiDestroy(object_editor_gui);
        exit;
    }
    
    if (guiCheckButton(btn_oe_save)) {
        object[| object_selected].name = btn_oe_name.myText;
        object[| object_selected].image_index = guiGetSelectionIndex(object_editor_selection);
        guiDestroy(object_editor_gui);
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - chunk_sel_gui

if (guiExists(chunk_sel_gui)) {
    var y_max_offset = 0;
    var size = 0;
    if (ds_list_size(chunk) &gt; 1) {
        size = btn_cs_chunk[1].y - btn_cs_chunk[0].y;
        y_max_offset = max(0, size * ds_list_size(chunk) - size * 6);
    }
    // Cancel
    if (guiCheckButton(btn_cs_cancel)) {
        if (instance_exists(specific_chunk) &amp;&amp; specific_chunk.myChunk == noone) {
            ds_list_delete(specchunk, specific_chunk.index);
            instance_destroy(specific_chunk);
        }
        guiDestroy(chunk_sel_gui);
        exit;
    }
    
    // New chunk
    if (guiCheckButton(btn_cs_new)) {
        if (ds_list_size(chunk) == 0) {
            btn_cs_chunk[0].visible = true;
            ds_list_add(chunk, instance_create(0, 0, objChunk));
            btn_cs_chunk[0].myChunk = chunk[| ds_list_size(chunk) - 1];
            chunk_selected = 0;
            btn_cs_chunk[0].myColor = c_green;
            createChunkImage(chunk[| ds_list_size(chunk) - 1]);
            btn_cs_chunk[0].sprite_index = btn_cs_chunk[0].myChunk.sprite_index;
            chunk[| ds_list_size(chunk) - 1].index = ds_list_size(chunk) - 1;
        }
        else {
            var spacing = 7;
            btn_cs_chunk[ds_list_size(chunk)] = guiDuplicateElement(
                chunk_sel_gui, btn_cs_chunk[0], btn_cs_chunk[0].x,
                btn_cs_chunk[ds_list_size(chunk) - 1].y + btn_cs_chunk[0].myHeight + spacing);
            btn_cs_chunk[ds_list_size(chunk)].visible = true;
            ds_list_add(chunk, instance_create(0, 0, objChunk));
            btn_cs_chunk[ds_list_size(chunk) - 1].myChunk = chunk[| ds_list_size(chunk) - 1];
            btn_cs_chunk[chunk_selected].myColor = c_ltgray;
            chunk_selected = ds_list_size(chunk) - 1;
            btn_cs_chunk[ds_list_size(chunk) - 1].myColor = c_green;
            createChunkImage(chunk[| ds_list_size(chunk) - 1]);
            btn_cs_chunk[ds_list_size(chunk) - 1].sprite_index = btn_cs_chunk[ds_list_size(chunk) - 1].myChunk.sprite_index;
            chunk[| ds_list_size(chunk) - 1].index = ds_list_size(chunk) - 1;
        }
        chunk_sel_gui.myUpdate = true;
        
    }
    
    // Scroll
    var scroll_speed = size / 3;
    
    // Scroll down
    //if (guiCheckButton(btn_cs_prev)) {
    if (btn_cs_prev.myPressed) {
        if (scroll &lt; y_max_offset) {
            scroll += scroll_speed;
            for (var i = 0; i &lt; ds_list_size(chunk); i++) {
                btn_cs_chunk[i].y -= scroll_speed;
                btn_cs_chunk[i].myStateChange = true;
            }
        }
    }
    
    if (btn_cs_pprev.myPressed) {
        if (scroll &lt; y_max_offset) {
            scroll += scroll_speed * 3;
            for (var i = 0; i &lt; ds_list_size(chunk); i++) {
                btn_cs_chunk[i].y -= scroll_speed * 3;
                btn_cs_chunk[i].myStateChange = true;
            }
        }
    }
    
    // Scroll up
    //if (guiCheckButton(btn_cs_next)) {
    if (btn_cs_next.myPressed) {
        if (scroll &gt; 0) {
            scroll -= scroll_speed;
            for (var i = 0; i &lt; ds_list_size(chunk); i++) {
                btn_cs_chunk[i].y += scroll_speed;
                btn_cs_chunk[i].myStateChange = true;
            }
        }
    }
    
    if (btn_cs_nnext.myPressed) {
        if (scroll &gt; 0) {
            scroll -= scroll_speed * 3;
            for (var i = 0; i &lt; ds_list_size(chunk); i++) {
                btn_cs_chunk[i].y += scroll_speed * 3;
                btn_cs_chunk[i].myStateChange = true;
            }
        }
    }
    
    // Chunk edit
    if (guiCheckButton(btn_cs_edit) &amp;&amp; ds_list_size(chunk) &gt; 0) {
        chunk_editor_gui = guiLoad("ChunkEdit.gui", 100, 100);
        btn_ce_save = guiGetObject(chunk_editor_gui, 38);
        btn_ce_save.tooltip = "Save changes and close chunk editor.";
        btn_ce_cancel = guiGetObject(chunk_editor_gui, 39);
        btn_ce_cancel.tooltip = "Discard changes and close chunk editor.";
        btn_ce_shiftp = guiGetObject(chunk_editor_gui, 44);
        btn_ce_shiftm = guiGetObject(chunk_editor_gui, 45);
        btn_ce_export = guiGetObject(chunk_editor_gui, 48);
        btn_ce_load = guiGetObject(chunk_editor_gui, 49);
        btn_ce_changeall = guiGetObject(chunk_editor_gui, 46);
        btn_ce_name = guiGetObject(chunk_editor_gui, 40);
        btn_ce_name.tooltip = "The name of the chunk. Used for clarity.";
        btn_ce_name.myInputBox = true;
        btn_ce_name.myInputType = INPUT_TYPE_STRING;
        btn_ce_name.myText = chunk[| chunk_selected].name;
        btn_ce_shiftsolid = guiGetObject(chunk_editor_gui, 51);
        btn_ce_shiftsolid.myCheckBox = true;
        btn_ce_shiftsolid.myChecked = true;
        btn_ce_shiftsolid.sprite_index = sprCheck;
        btn_ce_shiftnonsolid = guiGetObject(chunk_editor_gui, 52);
        btn_ce_shiftnonsolid.myCheckBox = true;
        btn_ce_shiftnonsolid.myChecked = true;
        btn_ce_shiftnonsolid.sprite_index = sprCheck;
        var spr;
        if (sprite_exists(custom_tiles)) spr = custom_tiles;
        else spr = sprTiles;
        for (var i = 0; i &lt; 36; i++) {
            btn_ce_tile[i] = guiGetObject(chunk_editor_gui, 2 + i);
            btn_ce_tile[i].sprite_index = spr;
            btn_ce_tile[i].image_speed = 0;
            btn_ce_tile[i].image_index = chunk[| chunk_selected].tile[i];
            btn_ce_tile[i].myText = " ";
            btn_ce_tile[i].tooltip = "Click to select which tile to use.";
        }
    }
    
    // delete
    if (guiCheckButton(btn_cs_del) &amp;&amp; ds_list_size(chunk) &gt; 0) {
        openConfirmDelete(0, chunk[| chunk_selected]);
        exit;
    }
    
    // Selection
    for (var i = 0; i &lt; ds_list_size(chunk); i++) {
        if (guiCheckButton(btn_cs_chunk[i])) {
            btn_cs_chunk[chunk_selected].myColor = make_color_rgb(225,225,225);
            btn_cs_chunk[i].myColor = c_green;
            chunk_selected = i;
            chunk_sel_gui.myUpdate = true;
        }
        if (btn_cs_chunk[i].myText != btn_cs_chunk[i].myChunk.name) {
            btn_cs_chunk[i].myText = btn_cs_chunk[i].myChunk.name;
            btn_cs_chunk[i].myStateChange = true;
        }
    }
    
    // Use
    if (guiCheckButton(btn_cs_use)) {
        if (ds_list_size(chunk) &gt; 0) {
            // selecting chunk for region
            if (guiExists(region_editor_gui)) {
                btn_re_chunk[region_chunk].myChunk = chunk[| chunk_selected];
                btn_re_chunk[region_chunk].sprite_index = chunk[| chunk_selected].sprite_index;
                btn_re_chunk[region_chunk].myStateChange = true;
                guiDestroy(chunk_sel_gui);
                exit;
            }
            else {
                // selecting specific chunk
                specific_chunk.myChunk = chunk[| chunk_selected];
                specific_chunk.sprite_index = chunk[| chunk_selected].sprite_index;
                guiDestroy(chunk_sel_gui);
                exit;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - chunk_editor_gui

if (guiExists(chunk_editor_gui)) {
    // cancel
    if (guiCheckButton(btn_ce_cancel)) {
        guiDestroy(chunk_editor_gui);
    }
    
    // save
    if (guiCheckButton(btn_ce_save)) {
        chunk[| chunk_selected].name = btn_ce_name.myText;
        for (var i = 0; i &lt; 36; i++) {
            chunk[| chunk_selected].tile[i] = btn_ce_tile[i].image_index;
        }
        createChunkImage(chunk[| chunk_selected]);
        btn_cs_chunk[chunk_selected].sprite_index = chunk[| chunk_selected].sprite_index;
        btn_cs_chunk[chunk_selected].myStateChange = true;
        guiDestroy(chunk_editor_gui);
        exit;
    }
    
    // export
    if (guiCheckButton(btn_ce_export)) {
        var save = get_save_filename("Arduventure Chunk File|*.acf", btn_ce_name.myText + ".acf");
        if (is_string(save) &amp;&amp; string_length(save) &gt; 1) {
            var file = file_text_open_write(save);
            file_text_write_string(file, btn_ce_name.myText);
            file_text_writeln(file);
            for (var i = 0; i &lt; 36; i++) {
                file_text_write_string(file, string(btn_ce_tile[i].image_index));
                file_text_writeln(file);
            }
            file_text_close(file);
        }
    }
    
    // load
    if (guiCheckButton(btn_ce_load)) {
        var load = get_open_filename("Arduventure Chunk File|*.acf", btn_ce_name.myText + ".acf");
        if (is_string(load) &amp;&amp; string_length(load) &gt; 1) {
            var file = file_text_open_read(load);
            btn_ce_name.myText = file_text_read_string(file);
            file_text_readln(file);
            for (var i = 0; i &lt; 36; i++) {
                btn_ce_tile[i].image_index = real(file_text_read_string(file));
                file_text_readln(file);
            }
            file_text_close(file);
            btn_ce_name.myStateChange = true;
        }
    }
    
    if (guiCheckButton(btn_ce_shiftp)) {
        for (var i = 0; i &lt; 36; i++) {
            if (btn_ce_tile[i].image_index &lt; sprite_get_number(sprTiles) - 1 &amp;&amp;
            ((btn_ce_tile[i].image_index &lt; custom_num_empty &amp;&amp; btn_ce_shiftnonsolid.myChecked) ||
            btn_ce_tile[i].image_index &gt;= custom_num_empty &amp;&amp; btn_ce_shiftsolid.myChecked)) {
                btn_ce_tile[i].image_index++;
            }
        }
        btn_ce_shiftp.myStateChange = true;
    }
    
    if (guiCheckButton(btn_ce_shiftm)) {
        for (var i = 0; i &lt; 36; i++) {
            if (btn_ce_tile[i].image_index &gt; 0 &amp;&amp;
            ((btn_ce_tile[i].image_index &lt; custom_num_empty &amp;&amp; btn_ce_shiftnonsolid.myChecked) ||
            btn_ce_tile[i].image_index &gt;= custom_num_empty &amp;&amp; btn_ce_shiftsolid.myChecked)) {
                btn_ce_tile[i].image_index--;
            }
        }
        btn_ce_shiftm.myStateChange = true;
    }
    
    // change all
    if (guiCheckButton(btn_ce_changeall)) {
        tile_selected = 255;
        /*tile_sel_gui = guiLoad("TileSelect.gui", 80, 80);
        btn_ts_next = guiGetObject(tile_sel_gui, 18);
        btn_ts_next.tooltip = "Show next page of tiles.";
        btn_ts_prev = guiGetObject(tile_sel_gui, 19);
        btn_ts_prev.tooltip = "Show previous page of tiles.";
        btn_ts_cancel = guiGetObject(tile_sel_gui, 20);
        btn_ts_cancel.tooltip = "Close tile selection without selecting a tile.";
        tile_start = 0;
        for (var a = 0; a &lt; 16; a++) {
            btn_ts_tile[a] = guiGetObject(tile_sel_gui, 2 + a);
            btn_ts_tile[a].sprite_index = sprTiles;
            btn_ts_tile[a].image_speed = 0;
            btn_ts_tile[a].image_index = a;
            btn_ts_tile[a].myText = " ";
            btn_ts_tile[a].tooltip = "Click to select this tile.";
        }*/
        openTileSelect(false);
    }
    
    // tile
    for (var i = 0; i &lt; 36; i++) {
        if (guiCheckButton(btn_ce_tile[i])) {
            tile_selected = i;
            openTileSelect(false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - region_sel_gui

if (guiExists(region_sel_gui)) {
    var y_max_offset = 0;
    var size = 0;
    if (ds_list_size(region) &gt; 1) {
        size = btn_rs_region[1].y - btn_rs_region[0].y;
        y_max_offset = max(0, size * ds_list_size(region) - size * 7);
    }
    // Cancel
    if (guiCheckButton(btn_rs_cancel)) {
        guiDestroy(region_sel_gui);
        exit;
    }
    
    // New region
    if (guiCheckButton(btn_rs_new)) {
        if (ds_list_size(region) == 0) {
            btn_rs_region[0].visible = true;
            ds_list_add(region, instance_create(0, 0, objRegion));
            btn_rs_region[0].myRegion = region[| ds_list_size(region) - 1];
            region_selected = 0;
            btn_rs_region[0].myColor = c_green;
        }
        else {
            var spacing = 7;
            btn_rs_region[ds_list_size(region)] = guiDuplicateElement(
                region_sel_gui, btn_rs_region[0], btn_rs_region[0].x,
                btn_rs_region[ds_list_size(region) - 1].y + btn_rs_region[0].myHeight + spacing);
            btn_rs_region[ds_list_size(region)].visible = true;
            ds_list_add(region, instance_create(0, 0, objRegion));
            btn_rs_region[ds_list_size(region) - 1].myRegion = region[| ds_list_size(region) - 1];
            btn_rs_region[region_selected].myColor = c_ltgray;
            region_selected = ds_list_size(region) - 1;
            btn_rs_region[ds_list_size(region) - 1].myColor = c_green;
        }
        region_sel_gui.myUpdate = true;
    }
    
    // Scroll
    var scroll_speed = size / 3;
    
    // Scroll down
    //if (guiCheckButton(btn_rs_prev)) {
    if (btn_rs_prev.myPressed) {
        if (scroll &lt; y_max_offset) {
            scroll += scroll_speed;
            for (var i = 0; i &lt; ds_list_size(region); i++) {
                btn_rs_region[i].y -= scroll_speed;
                btn_rs_region[i].myStateChange = true;
            }
        }
    }
    
    // Scroll up
    //if (guiCheckButton(btn_rs_next)) {
    if (btn_rs_next.myPressed) {
        if (scroll &gt; 0) {
            scroll -= scroll_speed;
            for (var i = 0; i &lt; ds_list_size(region); i++) {
                btn_rs_region[i].y += scroll_speed;
                btn_rs_region[i].myStateChange = true;
            }
        }
    }
    
    // Region edit
    if (guiCheckButton(btn_rs_edit) &amp;&amp; ds_list_size(region) &gt; 0) {
        region_editor_gui = guiLoad("RegionEdit.gui", 65, 80);
        btn_re_save = guiGetObject(region_editor_gui, 4);
        btn_re_save.tooltip = "Save changes and close.";
        btn_re_cancel = guiGetObject(region_editor_gui, 5);
        btn_re_cancel.tooltip = "Discard changes and close.";
        
        //name
        btn_re_name = guiGetObject(region_editor_gui, 6);
        btn_re_name.myInputBox = true;
        btn_re_name.myInputType = INPUT_TYPE_STRING;
        btn_re_name.myText = region[| region_selected].name;
        btn_re_name.tooltip = "The name of the region. Used for clarity.";
        
        //x
        btn_re_x = guiGetObject(region_editor_gui, 11);
        btn_re_x.myInputBox = true;
        btn_re_x.myInputMax = 31;
        btn_re_x.myText = string(region[| region_selected].x);
        btn_re_x.myInputValueInt = region[| region_selected].x;
        btn_re_x.tooltip = "The Chunk X position in the world the region starts at.";
        
        //y
        btn_re_y = guiGetObject(region_editor_gui, 13);
        btn_re_y.myInputBox = true;
        btn_re_y.myInputMax = 31;
        btn_re_y.myText = string(region[| region_selected].y);
        btn_re_y.myInputValueInt = region[| region_selected].y;
        btn_re_y.tooltip = "The Chunk Y position in the world the region starts at.";
        
        //w
        btn_re_w = guiGetObject(region_editor_gui, 15);
        btn_re_w.myInputBox = true;
        btn_re_w.myInputMax = 32;
        btn_re_w.myText = string(region[| region_selected].width);
        btn_re_w.myInputValueInt = region[| region_selected].width;
        btn_re_w.tooltip = "The number of chunks in the region horizontally.";
        
        //h
        btn_re_h = guiGetObject(region_editor_gui, 17);
        btn_re_h.myInputBox = true;
        btn_re_h.myInputMax = 32;
        btn_re_h.myInputValueInt = region[| region_selected].height;
        btn_re_h.myText = string(region[| region_selected].height);
        btn_re_h.tooltip = "The number of chunks in the region vertically.";
        
        // radios
        btn_re_empty = guiGetObject(region_editor_gui, 21);
        btn_re_empty.tooltip = "When a chunk is empty, it looks to#the surrounding chunks to determine which to use."; 
        btn_re_solid = guiGetObject(region_editor_gui, 23);
        btn_re_solid.tooltip = "When a chunk is solid, it looks to#the surrounding chunks to determine which to use.";
        btn_re_bin = guiGetObject(region_editor_gui, 19);
        btn_re_bin.tooltip = "Pretty straight forward.#Try it and see how it works."; 
        region_type = guiCreateSelection(region_editor_gui, btn_re_empty, btn_re_solid, btn_re_bin);
        
        switch (region[| region_selected].type) {
            case 0: guiSelectObject(btn_re_bin); break;
            case 1: guiSelectObject(btn_re_empty); break;
            case 2: guiSelectObject(btn_re_solid); break;
        }
        
        //depth
        btn_re_depth = guiGetObject(region_editor_gui, 27);
        btn_re_depth.myInputBox = true;
        btn_re_depth.myText = string(region[| region_selected].depth - 100);
        btn_re_depth.myInputValueInt = region[| region_selected].depth - 100;
        btn_re_depth.tooltip = "The order for which regions are rendered.#Allows for regions inside other regions.#Lower numbers take precedence over higher#numbers in case of collisions";
        
        // chunks
        for (var i = 0; i &lt; 17; i++) {
            btn_re_chunk[i] = guiGetObject(region_editor_gui, 28 + i);
            //btn_re_chunk[i].sprite_index = sprTiles;
            //btn_re_chunk[i].image_speed = 0;
            //btn_re_chunk[i].image_index = chunk[| chunk_selected].tile[i];
            btn_re_chunk[i].myText = " ";
            btn_re_chunk[i].myChunk = region[| region_selected].chunks[i];
            if (instance_exists(btn_re_chunk[i].myChunk)) {
                btn_re_chunk[i].sprite_index = btn_re_chunk[i].myChunk.sprite_index;
            }
            else {
                btn_re_chunk[i].sprite_index = sprDemoChunks;
                btn_re_chunk[i].image_speed = 0;
                btn_re_chunk[i].image_index = i;
            }
            if (region[| region_selected].type == 0 &amp;&amp; i &gt; 1) {
                btn_re_chunk[i].visible = false;
            }
            else {
                btn_re_chunk[i].visible = true;
            }
        }
        
        //color
        region_color_selection = guiCreateSelection(region_editor_gui);
        for (var i = 0; i &lt; 8; i++) {
            btn_re_color[i] = guiGetObject(region_editor_gui, 47 + i);
            guiAddSelection(region_color_selection, btn_re_color[i]);
            if (region[| region_selected].myColor == btn_re_color[i].myColor) {
                guiSelectObject(btn_re_color[i]);
            }
        }
        
        box_re_region = guiGetObject(region_editor_gui, 1);
        box_re_main = guiGetObject(region_editor_gui, 3);
        box_re_extra = guiGetObject(region_editor_gui, 0);
    }
    
    // delete
    if (guiCheckButton(btn_rs_del) &amp;&amp; ds_list_size(region) &gt; 0) {
        openConfirmDelete(1, region[| region_selected]);
        exit;
    }
    
    // Selection
    for (var i = 0; i &lt; ds_list_size(region); i++) {
        if (guiCheckButton(btn_rs_region[i])) {
            btn_rs_region[region_selected].myColor = make_color_rgb(225,225,225);
            btn_rs_region[i].myColor = c_green;
            region_selected = i;
            region_sel_gui.myUpdate = true;
        }
        if (btn_rs_region[i].myText != btn_rs_region[i].myRegion.name) {
            btn_rs_region[i].myText = btn_rs_region[i].myRegion.name;
            btn_rs_region[i].myStateChange = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - region_editor_gui

if (guiExists(region_editor_gui)) {
    //cancel
    if (guiCheckButton(btn_re_cancel)) {
        guiDestroy(region_editor_gui);
        exit;
    }
    
    // save
    if (guiCheckButton(btn_re_save)) {
        switch (guiGetSelection(region_type)) {
            case btn_re_bin: region[| region_selected].type = 0; break;
            case btn_re_empty: region[| region_selected].type = 1; break;
            case btn_re_solid: region[| region_selected].type = 2; break;
        }
        region[| region_selected].name = btn_re_name.myText;
        btn_rs_region[region_selected].myText = btn_re_name.myText;
        btn_rs_region[region_selected].myStateChange = true;
        region[| region_selected].x = btn_re_x.myInputValueInt;
        region[| region_selected].y = btn_re_y.myInputValueInt;
        region[| region_selected].width = btn_re_w.myInputValueInt;
        region[| region_selected].height = btn_re_h.myInputValueInt;
        region[| region_selected].depth = btn_re_depth.myInputValueInt + 100;
        region[| region_selected].myColor = guiGetSelection(region_color_selection).myColor;
        for (var i = 0; i &lt; 17; i++) {
            region[| region_selected].chunks[i] = btn_re_chunk[i].myChunk;
        }
        guiDestroy(region_editor_gui);
        exit;
    }
    
    // chunks
    for (var i = 0; i &lt; 17; i++) {
        if (guiCheckButton(btn_re_chunk[i])) {
            region_chunk = i;
            openSelectChunk(true);
            exit;
        }
    }
    
    // type
    if (guiGetSelection(region_type) == btn_re_bin) {
        btn_re_chunk[0].myText = "Empty";
        btn_re_chunk[1].myText = "Solid";
        btn_re_chunk[1].image_index = 16;
        box_re_region.myHeight = 86;
        box_re_main.myHeight = 370;
        box_re_extra.visible = false;
        for (var i = 2; i &lt; 17; i++) {
            btn_re_chunk[i].visible = false;
        }
    }
    else if (guiGetSelection(region_type) == btn_re_empty) {
        btn_re_chunk[0].myText = "Empty";
        btn_re_chunk[1].myText = " ";
        btn_re_chunk[1].image_index = 1;
        //btn_re_chunk[15].myText = "Solid";
        box_re_region.myHeight = 249;
        box_re_main.myHeight = 529;
        box_re_extra.visible = true;
        for (var i = 2; i &lt; 17; i++) {
            btn_re_chunk[i].visible = true;
        }
    }
    else if (guiGetSelection(region_type) == btn_re_solid) {
        btn_re_chunk[0].myText = "Solid";
        btn_re_chunk[1].myText = " ";
        btn_re_chunk[1].image_index = 1;
        //btn_re_chunk[15].myText = "Empty";
        box_re_region.myHeight = 249;
        box_re_main.myHeight = 529;
        box_re_extra.visible = true;
        for (var i = 2; i &lt; 17; i++) {
            btn_re_chunk[i].visible = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - tile_sel_gui

if (guiExists(tile_sel_gui)) {
    var spr;
    if (sprite_exists(custom_tiles)) spr = custom_tiles;
    else spr = sprTiles;

    // cancel
    if (guiCheckButton(btn_ts_cancel)) {
        guiDestroy(tile_sel_gui);
    }
    
    // next
    if (guiCheckButton(btn_ts_next)) {
        if (tile_start + 16 &lt; sprite_get_number(spr)) {
            tile_start += 16;
            for (var i = 0; i &lt; 16; i++) {
                if (tile_start + i &lt; sprite_get_number(spr)) {
                    btn_ts_tile[i].image_index = tile_start + i;
                    btn_ts_tile[i].visible = true;
                    btn_ts_tile[i].myStateChange = true;
                }
                else {
                    btn_ts_tile[i].visible = false;
                }
            }
        }
    }
    
    // previous
    if (guiCheckButton(btn_ts_prev)) {
        if (tile_start &gt; 0) {
            tile_start -= 16;
            for (var i = 0; i &lt; 16; i++) {
                if (tile_start + i &lt; sprite_get_number(spr)) {
                    btn_ts_tile[i].image_index = tile_start + i;
                    btn_ts_tile[i].visible = true;
                    btn_ts_tile[i].myStateChange = true;
                }
                else {
                    btn_ts_tile[i].visible = false;
                }
            }
        }
    }
    
    // tile buttons
    for (var i = 0; i &lt; 90; i++) {
        if (instance_exists(btn_ts_tile[i]) &amp;&amp; guiCheckButton(btn_ts_tile[i])) {
            if (tile_sel_gui.specific_tile) {
                specific_tile.tile = btn_ts_tile[i].image_index;
                guiDestroy(tile_sel_gui);
                exit;
            }
            else {
                if (tile_selected &lt; 255) {
                    btn_ce_tile[tile_selected].image_index = btn_ts_tile[i].image_index;
                    btn_ce_tile[tile_selected].myStateChange = true;
                    guiDestroy(tile_sel_gui);
                    exit;
                }
                else {
                    btn_ce_tile[0].myStateChange = true;
                    for (var a = 0; a &lt; NUM_TILES_IN_CHUNK; a++) {
                        btn_ce_tile[a].image_index = btn_ts_tile[i].image_index;
                    }
                    guiDestroy(tile_sel_gui);
                    exit;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - tile_edit_gui

if (guiExists(tile_edit_gui)) {
    
    // import
    if (guiCheckButton(btn_te_import)) {
        var iname = get_open_filename("PNG Image File|*.png", "");
        if (is_string(iname) &amp;&amp; string_length(iname) &gt; 1 &amp;&amp; file_exists(iname)) {
            tile_edit_gui.iname = iname;
            var sub = get_integer("How many tiles are in this set?", tile_edit_gui.num_tiles);
            if (sub &gt; 0) {
                var temp = sprite_add(iname, sub, false, false, 0, 0);
                if (sprite_get_width(temp) != 16 || sprite_get_height(temp) != 16) {
                    show_message("Error: tiles must be 16x16 pixels!");
                    sprite_delete(temp);
                }
                else {
                    if (sprite_exists(tile_edit_gui.custom_tiles)) {
                        sprite_delete(tile_edit_gui.custom_tiles);
                    }
                    tile_edit_gui.custom_tiles = temp;
                    tile_edit_gui.num_tiles = sub;
                    sprite_delete(box_te_tiles.sprite_index);
                    box_te_tiles.num_empty = real(btn_te_emptytiles.myText)
                    show_debug_message(string(box_te_tiles.num_empty));
                    box_te_tiles.sprite_index = createTileImage(tile_edit_gui.custom_tiles, box_te_tiles.num_empty);
                    box_te_tiles.myStateChange = true;
                }
            }
        }
    }
    
    // save
    if (guiCheckButton(btn_te_save)) {
        custom_tiles = tile_edit_gui.custom_tiles;
        custom_num_empty = real(btn_te_emptytiles.myText);
        sprite_delete(box_te_tiles.sprite_index);
        custom_tiles_path = tile_edit_gui.iname;
        custom_num_tiles = tile_edit_gui.num_tiles;
        
        for (var i = 0; i &lt; ds_list_size(chunk); i++) {
            createChunkImage(chunk[| i]);
        }
        
        guiDestroy(tile_edit_gui);
        exit;
    }
    
    // close
    if (guiCheckButton(btn_te_close)) {
        if (sprite_exists(tile_edit_gui.custom_tiles)
            &amp;&amp; tile_edit_gui.custom_tiles != custom_tiles) {
                sprite_delete(tile_edit_gui.custom_tiles);
        }
        sprite_delete(box_te_tiles.sprite_index);
        guiDestroy(tile_edit_gui);
        exit;
    }
    
    if (box_te_tiles.num_empty != real(btn_te_emptytiles.myText)) {
        sprite_delete(box_te_tiles.sprite_index);
        box_te_tiles.num_empty = real(btn_te_emptytiles.myText);
        if (sprite_exists(tile_edit_gui.custom_tiles)) {
            box_te_tiles.sprite_index = createTileImage(tile_edit_gui.custom_tiles, box_te_tiles.num_empty);
        }
        else {
            box_te_tiles.sprite_index = createTileImage(sprTiles, box_te_tiles.num_empty);
        }
        box_te_tiles.myStateChange = true;
    }
    
    // tile shifts
    if (guiCheckButton(btn_te_shiftm)) {
        var spr;
        if (sprite_exists(tile_edit_gui.custom_tiles)) spr = tile_edit_gui.custom_tiles;
        else spr = sprTiles;
        for (var i = 0; i &lt; ds_list_size(chunk); i++) {
            for (var a = 0; a &lt; NUM_TILES_IN_CHUNK; a++) {
                if (chunk[| i].tile[a] &gt;= real(btn_te_emptytiles.myText) &amp;&amp; chunk[| i].tile[a] &gt; 0) {
                    chunk[| i].tile[a]--;
                }
            }
            createChunkImage(chunk[| i]);
        }
    }
    
    if (guiCheckButton(btn_te_shiftp)) {
        var spr;
        if (sprite_exists(tile_edit_gui.custom_tiles)) spr = tile_edit_gui.custom_tiles;
        else spr = sprTiles;
        for (var i = 0; i &lt; ds_list_size(chunk); i++) {
            for (var a = 0; a &lt; NUM_TILES_IN_CHUNK; a++) {
                if (chunk[| i].tile[a] &gt;= real(btn_te_emptytiles.myText) &amp;&amp; chunk[| i].tile[a] &lt; sprite_get_number(spr)) {
                    chunk[| i].tile[a]++;
                }
            }
            createChunkImage(chunk[| i]);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - save_gui

if (guiExists(save_gui)) {
    if (guiCheckButton(btn_save_cancel) || guiCheckButton(btn_save_x)) {
        guiDestroy(save_gui);
        exit;
    }
    
    if (guiCheckButton(btn_save_save)) {
        saveWorld(btn_save_name.myText);
        guiDestroy(save_gui);
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - world_sel_gui

if (guiExists(world_sel_gui)) {
    var y_max_offset = 0;
    var size = 0;
    if (ds_list_size(world) &gt; 1) {
        size = btn_load_world[1].y - btn_load_world[0].y;
        y_max_offset = max(0, size * ds_list_size(world) - size * 7);
    }
    
    // Scroll
    var scroll_speed = size / 3;

    // cancel
    if (guiCheckButton(btn_load_cancel)) {
        guiDestroy(world_sel_gui);
        exit;
    }
    
    // Scroll down
    if (guiCheckButton(btn_load_next)) {
        if (scroll &lt; y_max_offset) {
            scroll += scroll_speed;
            for (var i = 0; i &lt; ds_list_size(world); i++) {
                btn_load_world[i].y -= scroll_speed;
                btn_load_world[i].myStateChange = true;
            }
        }
    }
    
    // Scroll up
    if (guiCheckButton(btn_load_prev)) {
        if (scroll &gt; 0) {
            scroll -= scroll_speed;
            for (var i = 0; i &lt; ds_list_size(world); i++) {
                btn_load_world[i].y += scroll_speed;
                btn_load_world[i].myStateChange = true;
            }
        }
    }
    
    // open
    if (guiCheckButton(btn_load_load)) {
        if (ds_list_size(chunk) &gt; 0 || ds_list_size(region) &gt; 0) {
            openSaveFirst(true);
        }
        else {
            loadSelectedWorld();
        }
    }
    
    // find
    if (guiCheckButton(btn_load_find)) {
        var wname = get_open_filename("Arduventure World File|*.awd", "");
        if (is_string(wname) &amp;&amp; string_length(wname) &gt; 0) {
            var sname = "saves\" + filename_name(wname);
            if (file_exists(sname)) {
                //sname = get_save_filename_ext("Arduventure World File|*.awd", filename_name(sname), program_directory + "\saves", "Change Name? Or Replace?");
                if (!show_question("Replace existing file?")) {
                    sname = "";
                }
            }
            if (is_string(sname) &amp;&amp; string_length(sname) &gt; 0) {
                file_copy(wname, sname);
                guiDestroy(world_sel_gui);
                exit;
            }
        }
    }
    
    // Selection
    for (var i = 0; i &lt; ds_list_size(world); i++) {
        if (guiCheckButton(btn_load_world[i])) {
            btn_load_world[world_selected].myColor = make_color_rgb(225,225,225);
            btn_load_world[i].myColor = c_green;
            world_selected = i;
            world_sel_gui.myUpdate = true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button_handling - save_first_gui

if (guiExists(save_first_gui)) {
    // yes
    if (guiCheckButton(btn_sf_yes)) {
        if (!save_first_gui.loading)
            openSaveMenu(1);
        else
            openSaveMenu(2);
        guiDestroy(save_first_gui);
        exit;
    }
    
    // no
    if (guiCheckButton(btn_sf_no)) {
        clearWorld();
        if (save_first_gui.loading) loadSelectedWorld();
        guiDestroy(save_first_gui);
        exit;
    }
    
    //cancel
    if (guiCheckButton(btn_sf_x)) {
        guiDestroy(save_first_gui);
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button_handling - confirm_delete_gui

if (guiExists(confirm_delete_gui)) {
    if (guiCheckButton(btn_cd_cancel) || guiCheckButton(btn_cd_x)) {
        guiDestroy(confirm_delete_gui);
        exit;
    }
    
    if (guiCheckButton(btn_cd_delete)) {
        switch (confirm_delete_gui.mode) {
            // chunk
            case 0: {
                for (var i = 0; i &lt; ds_list_size(region); i++) {
                    for (var a = 0; a &lt; 17; a++) {
                        if (region[| i].chunks[a] == confirm_delete_gui.obj)  {
                            region[| i].chunks[a] = noone;
                        }
                    }
                }
                for (var i = 0; i &lt; ds_list_size(chunk); i++) {
                    if (i &lt; ds_list_size(chunk)) {
                        if (chunk[| i] == confirm_delete_gui.obj) {
                            cindex = i;
                            ds_list_delete(chunk, i);
                            sprite_delete(confirm_delete_gui.obj.sprite_index);
                            with confirm_delete_gui.obj {
                                instance_destroy();
                            }
                        }
                        
                        chunk[| i].index = i;
                    }
                }
                guiDestroy(chunk_sel_gui);
            } break;
            // region
            case 1: {
                for (var i = 0; i &lt; ds_list_size(region); i++) {
                    if (region[| i] == confirm_delete_gui.obj) {
                        ds_list_delete(region, i);
                    }
                    with confirm_delete_gui.obj {
                        instance_destroy();
                    }
                }
                guiDestroy(region_sel_gui);
            } break;
            // object
            case 2: {
            
            }
        }
        guiDestroy(confirm_delete_gui);
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - export_gui

if (guiExists(export_gui)) {

    if (guiCheckButton(btn_e_x) || guiCheckButton(btn_e_cancel)) {
        guiDestroy(export_gui);
        exit;
    }
    
    if (guiCheckButton(btn_e_export)) {
        exportWorld(btn_e_name.myText, btn_e_image.myChecked, btn_e_copy.myChecked);
        guiDestroy(export_gui);
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// button handling - door_dest_gui

if (guiExists(door_dest_gui)) {
    if (guiCheckButton(btn_dd_cancel)) {
        ds_list_delete(specobject, specific_object.index);
        with specific_object {
            instance_destroy();
        }
        for (var i = 0; i &lt; ds_list_size(specobject); i++) {
            specobject[| i].index = i;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view handling

if (gui_focus == main_gui || gui_focus == door_dest_gui) {

    if (mouse_check_button_pressed(mb_middle)) {
        mcx = device_mouse_x_to_gui(0);
        mcy = device_mouse_y_to_gui(0);
        vcx = view_xview;
        vcy = view_yview;
    }
    
    if (mouse_check_button(mb_middle)) {
        //view_xview = vcx - round((mouse_x - mcx) / 1.5);
        //view_yview = vcy - round((mouse_y - mcy) / 1.5);
        view_xview = vcx - (device_mouse_x_to_gui(0) - mcx);
        view_yview = vcy - (device_mouse_y_to_gui(0) - mcy);
        //mcx = mouse_x;
        //mcy = mouse_y;
        //vcx = view_xview;
        //vcy = view_yview;
    }
    
    if (keyboard_check(vk_left)) {
        view_xview -= 16;
    }
    if (keyboard_check(vk_right)) {
        view_xview += 16;
    }
    if (keyboard_check(vk_up)) {
        view_yview -= 16;
    }
    if (keyboard_check(vk_down)) {
        view_yview += 16;
    }
    
    view_xview = clamp(view_xview, 0, room_width - view_wview);
    view_yview = clamp(view_yview, -(main_gui.myHeight * zoom_level)+3, room_height - view_hview);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// tooltip handling

if (previous_mouse_x == mouse_x &amp;&amp; previous_mouse_y == mouse_y) {
    tooltip--;
}
else {
    tooltip = 10;
}
previous_mouse_x = mouse_x;
previous_mouse_y = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// player image
player_image++;
if (player_image &gt;= 40) player_image = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// door destination

if (gui_focus = door_dest_gui) {
    if (point_in_rectangle(mouse_x, mouse_y, 0, 0, room_width, room_height)) {
        specific_object.destx = floor(mouse_x / 16);
        specific_object.desty = floor(mouse_y / 16);
        guiDestroy(door_dest_gui);
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// placement
if (gui_focus == main_gui &amp;&amp; device_mouse_y_to_gui(0) &gt; main_gui.myHeight) {
    if (guiGetSelection(main_select) == btn_place_solid) {
            chunk_state[floor(mouse_x / 96) + floor(mouse_y / 96) * 32] = 1;
    }
    else if (guiGetSelection(main_select) == btn_place_chunk) {
        var o = collision_point(mouse_x, mouse_y, objSpecChunk, false, true);
        if (!instance_exists(o)) {
            specific_chunk = instance_create(floor(mouse_x / 96) * 96, floor(mouse_y / 96) * 96, objSpecChunk);
            ds_list_add(specchunk, specific_chunk);
            specific_chunk.index = ds_list_size(specchunk) - 1;
        }
        else {
            specific_chunk = o;
        }
        openSelectChunk(true);
    }
    else if (guiGetSelection(main_select) == btn_place_object) {
        var o = collision_point(mouse_x, mouse_y, objSpecObject, false, true);
        if (!instance_exists(o)) {
            specific_object = instance_create(floor(mouse_x / 16) * 16, floor(mouse_y / 16) * 16, objSpecObject);
            ds_list_add(specobject, specific_object);
            specific_object.index = ds_list_size(specobject) - 1;
        }
        else {
            specific_object = o;
        }
        openObjectSelect(true);
    }
    else if (guiGetSelection(main_select) == btn_place_player) {
        player_x = floor(mouse_x / 16) * 16;
        player_y = floor(mouse_y / 16) * 16;
    }
    else if (guiGetSelection(main_select) == btn_place_tile) {
        var o = collision_point(mouse_x, mouse_y, objSpecTile, false, true);
        if (!instance_exists(o)) {
            specific_tile = instance_create(floor(mouse_x / 16) * 16, floor(mouse_y / 16) * 16, objSpecTile);
            ds_list_add(spectile, specific_tile);
            specific_tile.index = ds_list_size(spectile) - 1;
        }
        else {
            specific_tile = o;
        }
        openTileSelect(true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// placement

if (guiGetSelection(main_select) == btn_place_solid) {
    if (gui_focus == main_gui &amp;&amp; mouse_y - view_yview &gt; main_gui.myHeight) {
        chunk_state[floor(mouse_x / 96) + floor(mouse_y / 96) * 32] = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawMiniMap();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control drawing

// white outside of room
if (view_yview &lt; 0) {
    draw_set_color(c_white);
    draw_rectangle(view_xview, view_yview, view_xview+view_wview, 0, false);
}

// draw solid chunks
if (btn_show_solid.myChecked) {
    draw_set_color(c_red);
    draw_set_alpha(0.3);
    var xx = 0;
    var yy = 0;
    for (var i = 0; i &lt; 32*32; i++) {
        if (rectangle_in_rectangle(xx, yy, xx + 96, yy + 96, view_xview, view_yview, view_xview + view_wview, view_yview + view_hview)) {
            if (chunk_state[i])
                draw_rectangle(xx, yy, xx + 96, yy + 96, false);
        }
        xx += 96;
        if (xx &gt;= 96 * 32) {
            xx = 0;
            yy += 96;
        }
    }
    draw_set_alpha(1);
}

// draw selected chunk
draw_set_color(c_green);
var cx = floor(mouse_x / 96) * 96;
var cy = floor(mouse_y / 96) * 96;
draw_rectangle(cx, cy, cx + 96, cy + 96, true);

// draw selected object
draw_set_color(c_yellow);
var tx = floor(mouse_x / 16) * 16;
var ty = floor(mouse_y / 16) * 16;
draw_rectangle(tx, ty, tx + 16, ty + 16, true);



draw_set_color(c_white);

if (instance_number(objGUIBase) &lt;= 1)      
    drawTooltipPos(floor(mouse_x / 96) * 96, (floor(mouse_y / 96) * 96) - 32, "Chunk X: " + string(floor(mouse_x / 96)) +
         " Y: " + string(floor(mouse_y / 96)) + "#Tile X: " +
         string(floor(mouse_x / 16)) + " Y: " + string(floor(mouse_y / 16)), false);
         
draw_sprite(sprPlayer, floor(player_image / 10), player_x, player_y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
