<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = 0;
/*
types are:
0 - solid/not solid with variations - binary
1 - center not solid defined        - empty
2 - center solid defined            - solid
*/

name = "unnamed";

for (var i = 0; i &lt; MAX_CHUNKS_IN_REGION; i++) {
    chunks[i] = noone;
    cused[i] = false;
    times_used[i] = 0;
}
    
width = 0;
height = 0;

myColor = make_color_rgb(254, 23, 23);

all_used = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>all_used = true;
//show_debug_message("Setting used chunks for region: " + name);
for (var i = 0; i &lt; MAX_CHUNKS_IN_REGION; i++) {
    if (cused[i]) {
        show_debug_message("chunk: " + string(i) + " " + chunks[i].name);
        chunks[i].is_used = true;
        chunks[i].times_used += times_used[i];
    }
    else {
        all_used = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; MAX_CHUNKS_IN_REGION; i++) {
    cused[i] = false;
    times_used[i] = 0;
}

switch (type) {
    // binary
    case 0: {
        for(var xx = x; xx &lt; x+width; xx++) {
            for (var yy = y; yy &lt; y+height; yy++) {
                //if (rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview)) {
                    if (!getSolidState(xx, yy)) {
                        if (instance_exists(chunks[0])) {
                            cused[0] = true;
                            times_used[0]++;
                            var sprite = chunks[0].sprite_index;
                            if (sprite_exists(sprite) &amp;&amp; rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview))
                                draw_sprite(sprite, 0, xx * 96, yy * 96);
                        }
                    }
                    else {
                        if (instance_exists(chunks[1])) {
                            cused[1] = true;
                            times_used[1]++;
                            var sprite = chunks[1].sprite_index;
                            if (sprite_exists(sprite) &amp;&amp; rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview))
                                draw_sprite(sprite, 0, xx * 96, yy * 96);
                        }
                    }
                //}
            }
        }
    } break;
    
    // empty center
    case 1: {
        for(var xx = x; xx &lt; x+width; xx++) {
            for (var yy = y; yy &lt; y+height; yy++) {
                //if (rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview)) {
                    if (getSolidState(xx, yy)) {
                        if (instance_exists(chunks[16])) {
                            cused[16] = true;
                            times_used[16]++;
                            var sprite = chunks[16].sprite_index;
                            if (sprite_exists(sprite) &amp;&amp; rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview))
                                draw_sprite(sprite, 0, xx * 96, yy * 96);
                        }
                    }
                    else {
                        var s = 0;
                        var r = getSolidState(xx + 1, yy);
                        var t = getSolidState(xx, yy - 1);
                        var l = getSolidState(xx - 1, yy);
                        var b = getSolidState(xx, yy + 1);
                        s = r | (t &lt;&lt; 1) | (l &lt;&lt; 2) | (b &lt;&lt; 3);
                        
                        if (instance_exists(chunks[s])) {
                            cused[s] = true;
                            times_used[s]++;
                            var sprite = chunks[s].sprite_index;
                            if (sprite_exists(sprite) &amp;&amp; rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview))
                                draw_sprite(sprite, 0, xx * 96, yy * 96);
                        }
                    }
                //}
            }
        }
    } break;
    
    // solid center
    case 2: {
        for(var xx = x; xx &lt; x+width; xx++) {
            for (var yy = y; yy &lt; y+height; yy++) {
                //if (rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview)) {
                    if (!getSolidState(xx, yy)) {
                        if (instance_exists(chunks[16])) {
                            cused[16] = true;
                            times_used[16]++;
                            var sprite = chunks[16].sprite_index;
                            if (sprite_exists(sprite) &amp;&amp; rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview))
                                draw_sprite(sprite, 0, xx * 96, yy * 96);
                        }
                    }
                    else {
                        var s = 0;
                        var r = getSolidState(xx + 1, yy);
                        var t = getSolidState(xx, yy - 1);
                        var l = getSolidState(xx - 1, yy);
                        var b = getSolidState(xx, yy + 1);
                        s = r | (t &lt;&lt; 1) | (l &lt;&lt; 2) | (b &lt;&lt; 3);
                        
                        if (instance_exists(chunks[s])) {
                            cused[s] = true;
                            times_used[s]++;
                            var sprite = chunks[s].sprite_index;
                            if (sprite_exists(sprite) &amp;&amp; rectangle_in_rectangle(xx * 96, yy * 96, xx * 96 +96, yy * 96 +96, view_xview, view_yview, view_xview+view_wview, view_yview+view_hview))
                                draw_sprite(sprite, 0, xx * 96, yy * 96);
                        }
                    }
                //}
            }
        }
    } break;
}

if (objControl.btn_show_regions.myChecked) {
    draw_set_color(myColor);
    draw_set_alpha(0.2);
    draw_rectangle(x * 96, y * 96, 96 * (x + width), 96 * (y + height), false);
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
